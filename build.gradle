plugins {
    id "dev.architectury.loom" version "1.7-SNAPSHOT"
    id "me.modmuss50.mod-publish-plugin" version "0.7.4"
    id "org.moddedmc.wiki.toolkit" version "0.2.4"
}

def loader = property("loom.platform")
if (property("loom.platform") == "neoforge") {
    loader = "neo"
}

def isFabric = loader == "fabric"
def isNeo = loader == "neo"
def isForge = loader == "forge"

def isSnapshot = false
def mcVer = property("deps.minecraft_version")
if (mcVer.contains("-") || mcVer.contains("w")) {
    isSnapshot = true
    mcVer.replaceAll("-", "")
}

version = project.mod_version + "+" + loader + "." + mcVer
group = project.maven_group

base {
    archivesName = project.mod_name
}

repositories {
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
    maven { url "https://maven.neoforged.net/releases" }
}

loom {
    runConfigs.all {
        ideConfigGenerated true
        runDir "../../run"
    }

    if (loader == "forge") {
        forge {
            mixinConfig "mutils.mixins.json"
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${property("deps.minecraft_version")}"
    mappings(loom.layered {
        mappings("net.fabricmc:yarn:${property("deps.yarn_mappings")}:v2")
        if (stonecutter.eval(property("deps.minecraft_version"), ">=1.21")) {
            mappings("dev.architectury:yarn-mappings-patch-neoforge:${property("deps.layered_mappings")}")
        }
    })

    if (isFabric) {
        modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
        modImplementation "maven.modrinth:modmenu:${property("deps.modmenu_version")}"
        modImplementation "maven.modrinth:main-menu-credits:${property("deps.mmc_version")}"
    } else if (isNeo) {
        neoForge "net.neoforged:neoforge:${property("deps.neoforge")}"
    } else if (isForge) {
        forge "net.minecraftforge:forge:${property("deps.fml")}"
    }

    modImplementation "maven.modrinth:yacl:${property("deps.yacl_version")}"
}

if (stonecutter.current.isActive) {
    rootProject.tasks.register("buildActive") {
        group = "project"
        dependsOn(tasks.named("build"))
        dependsOn(tasks.named("publishMods"))
    }
}

afterEvaluate {
    stonecutter {
        stonecutter.const("fabric", isFabric)
        stonecutter.const("neo", isNeo)
        stonecutter.const("forge", isForge)
    }
}

processResources {
    var replaceProperties = [
            minecraft_range: project.property("deps.mc_range"),
            mod_id         : mod_id,
            mod_name       : mod_name,
            mod_license    : mod_license,
            mod_version    : project.version,
            mod_authors    : mod_authors,
            mod_description: mod_description
    ]
    replaceProperties.each { key, value -> inputs.property(key, value) }

    if (isFabric) {
        filesMatching("fabric.mod.json") {
            expand replaceProperties
        }
        exclude(["META-INF/mods.toml", "META-INF/neoforge.mods.toml"])
    } else if (isNeo) {
        filesMatching("META-INF/neoforge.mods.toml") {
            expand replaceProperties
        }
        exclude(["fabric.mod.json", "META-INF/mods.toml"])
    } else if (isForge) {
        filesMatching("META-INF/mods.toml") {
            expand replaceProperties
        }
        exclude(["fabric.mod.json", "META-INF/neoforge.mods.toml"])
    }

    def packFormat
    switch (project.property("deps.minecraft_version")) {
        case "1.20.1":
            packFormat = 15;
            break;
        case "1.20.6":
            packFormat = 32;
            break;
        case "1.21.1":
            packFormat = 34;
            break;
        default:
            packFormat = 42;
    }

    filesMatching("pack.mcmeta") {
        expand("pack_format": packFormat)
    }
}

java {
    withSourcesJar()

    def java = stonecutter.eval(project.property("deps.minecraft_version"), ">=1.20.5")
            ? JavaVersion.VERSION_21 : JavaVersion.VERSION_17

    sourceCompatibility = java
    targetCompatibility = java
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}" }
    }
}

publishMods {
    if (project.property("deps.minecraft_version").contains("alpha")) {
        type = ALPHA
    } else if (project.property("deps.minecraft_version").contains("beta") || isSnapshot) {
        type = BETA
    } else {
        type = STABLE
    }

    changelog = "# ${project.version}\n" + file("../../CHANGELOG.md").text
    file = remapJar.archiveFile
    displayName = mod_name + " " + project.version
    def deps

    if (isFabric) {
        deps = ["yacl"]
        modLoaders.addAll("fabric", "quilt")
    } else if (isNeo) {
        deps = ["yacl"]
        modLoaders.add("neoforge")
    } else {
        deps = ["yacl"]
        modLoaders.add("forge")
    }

    if (project.property("deps.minecraft_version") == "1.20.1") {
        modrinth("m1.20.1") {
            projectId = "wklFEiuR"
            accessToken = providers.environmentVariable("MODRINTH_TOKEN")
            requires(deps[0])
            minecraftVersionRange {
                start = "1.20"
                end = "1.20.1"
            }

            // Discord
            announcementTitle = "Download from Modrinth"
        }

        curseforge("c1.20.1") {
            projectId = "1135297"
            accessToken = providers.environmentVariable("CURSEFORGE_API_KEY")
            requires(deps[0])
            minecraftVersionRange {
                start = "1.20"
                end = "1.20.1"
            }

            // Discord
            announcementTitle = "Download from CurseForge"
            projectSlug = "mutils"
        }
    }

    if (project.property("deps.minecraft_version") == "1.21.3") {
        modrinth("m1.21.3") {
            projectId = "wklFEiuR"
            accessToken = providers.environmentVariable("MODRINTH_TOKEN")
            requires(deps[0])
            minecraftVersionRange {
                start = "1.21"
                end = "1.21.3"
            }

            // Discord
            announcementTitle = "Download from Modrinth"
        }

        curseforge("c1.21.3") {
            projectId = "1135297"
            accessToken = providers.environmentVariable("CURSEFORGE_API_KEY")
            requires(deps[0])
            minecraftVersionRange {
                start = "1.21"
                end = "1.21.3"
            }

            // Discord
            announcementTitle = "Download from CurseForge"
            projectSlug = "mutils"
        }
    }

    github {
        accessToken = providers.environmentVariable("GITHUB_TOKEN")
        repository = "UltimatChamp/${mod_name}"
        commitish = "main"

        // Discord
        announcementTitle = "Download from GitHub"
    }

    discord {
        webhookUrl = providers.environmentVariable("DISCORD_WEBHOOK")
        username = "${mod_name} Releases"
        avatarUrl = "https://cdn.modrinth.com/data/wklFEiuR/images/690d8f555972de3b24cd7ee82c083ebb6a3e2155.png"
    }
}

wiki {
    docs {
        mutils {
            root = file("../../docs")
        }
    }
}
